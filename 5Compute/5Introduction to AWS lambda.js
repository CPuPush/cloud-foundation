/*
! Itroduction To AWS Lambda

! AWS Lambda Run code without servers
* Lambda is a serverless compute service.
* Your coderuns only when it is triggered.
* pay only for the compute time that you use.
* the code you run is a lambda function

* => However, there is another approach to compute that does not require you to provisionor manage servers. This third approach is often referred to as serverless computing. 
* AWS Lambda is an event-driven, serverless compute service. Lambda enables you to run code without provisioning or managing servers. 
* You create aLambda function, which is the AWS resource that contains the code that you upload. You then set the Lambda function to be triggered, either on a scheduledbasisor in response to an event. Your code only runs when it is triggered
* You pay only for the compute time you consume—youare notcharged when your code is not running.

? Benefits of lambda
* it supports multiple programming languages
* completely automated administration
* built-in fault tolerance
* it support the orchestration of multiple functions
* pay per use pricing

*=> With Lambda, there are no new languages, tools, or frameworks to learn. Lambda supports multiple programming languages, including Java, Go, PowerShell, Node.js, C#, Python, and Ruby. Your code can use any library, either native or third-party.
* Lambda completely automates the administration. It manages all the infrastructure to run your code on highly available, fault-tolerant infrastructure, which enables you to focus on building differentiated backend services. Lambda seamlessly deploys your code; does all the administration, maintenance, and security patches; and provides built-in logging and monitoring through Amazon CloudWatch. 
* Lambda provides built-in fault tolerance. It maintains compute capacity across multiple Availability Zones in each Region to help protect your code against individual machine failures or data center failures. There are no maintenance windows or scheduled downtimes.
* You can orchestrate multiple Lambda functions for complex or long-running tasks by building workflows withAWS Step Functions. Use Step Functions to define workflows. These workflows trigger a collection of Lambda functions by using sequential, parallel, branching, and error-handling steps. With Step Functions and Lambda, you can build stateful, long-running processes for applications and backends.
* With Lambda, you pay only for the requests that are served and the compute time that is required to run your code. Billing is metered in increments of 100 milliseconds, which make it cost-effective and easy to scale automatically from a few requests per day to thousands of requests per second.

? AWS Lambda event sources
event sources                     => Lambda function => running of your code => amazon cloud watch
  * amazon s3
  * amazon DynamoDB
  * amazon simple notification service(sns)
  * amazon simple queue service (amazon SqS)
  * amazon API Gateway
  * Application load balancer
  * many more

* Configure other AWS services as event sources to invoke your function as shown here
* Alternatively, invoke a Lambda function from the Lambda console, AWS SDK, or AWS CLI.

* => An event source is an AWS service or a developer-created application that produces events that trigger an AWS Lambda function to run.

* Some services publish events to Lambda by invoking the Lambda function directly. These services that invoke Lambda functions asynchronouslyinclude, but are not limited to, Amazon S3, Amazon Simple Notification Service (Amazon SNS), and Amazon CloudWatch Events.

* Lambda can also poll resources in other services that do not publish events to Lambda. For example, Lambda can pull records from an Amazon Simple Queue Service (Amazon SQS) queue and run a Lambda function for each fetched message. Lambda can similarly read events from Amazon DynamoDB

* Some services, such as Elastic Load Balancing (Application Load Balancer) and Amazon API Gateway can invoke your Lambda function directly.

* You can invoke Lambda functions directly with the Lambda console, the Lambda API, the AWS software development kit (SDK), the AWS CLI, and AWS toolkits. The direct invocation approach can be useful, such as when you are developing a mobile app and want the app to call Lambda functions. See the Using Lambda with Other Services documentation at https://docs.aws.amazon.com/lambda/latest/dg/lambda-services.htmlfor further details about all supported services

* AWS Lambda automatically monitors Lambda functions by using Amazon CloudWatch. To help you troubleshoot failures in a function, Lambda logs all requests that are handled by your function. It also automatically stores logs that are generated by your code through Amazon CloudWatch Logs

? AWS lambda function configuration
lambda function configuration
* function code
* dependencies(code librarty, etc)
* execution role
AWS lambda function 

* => Remember that a Lambda function is the custom code that you write to process events, and that Lambda runs the Lambda function on your behalf. 

* When you use the AWS Management Console to create a Lambda function, you first give the function a name. Then, you specify:
  * The runtime environment the function will use (for example, a version of Python or Node.js
  * An execution role (to grant IAM permission to the function so that it can interact with other AWS services as necessary)

* next, after you click create functionm you configure the function. configuration include:
  * add a trigger (specify one of the available event source)
  * add your funciton code
  * (use the provided code editor or upload a file that contains your code)
  * specify the memory in MB to alocate to your function(128Mb to 10,240 mb)
  * Optionally specify environment variables, description, timeout, the specific virtual private cloud (VPC) to run the function in, tags you would like to use, and other settings. For more information, see Configuring functions in the AWS Lambda console https://docs.aws.amazon.com/lambda/latest/dg/configuration-console.htmlin the AWS Documentation.

* All of the above settings end up in a Lambda deployment package which is a ZIP archive that contains your function code and dependencies.When you use the Lambda console to author your function, the console manages the package for you. However, you need to create a deployment package if you use the Lambda API to manage functions.


? Schedule-based labda function example: Start and stop EC2 isntance
Stop instance example
1. Time-based cloudWatch event
2. Lambda function triggered
3. EC2 isntances stopped
start instances example
4. Time-based cloudWatch event
5. lambda function triggered
6. EC2 instances started

* => Consider an example use case for a schedule-based Lambda function. Say that you are in a situation where you want to reduce your Amazon EC2 usage. You decide that you want to stop instances at a predefined time (for example, at night when no one is accessing them) and then you want to start the instances back up in the morning (before the workday starts).
* In this situation, you could configure AWS Lambda and Amazon CloudWatch Events to help you accomplish these actions automatically. 

* Here is what happens at each step in the example:
1. A CloudWatch event is scheduled to run a Lambda function to stop your EC2 instances at (for example) 22:00 GMT
2. The Lambda function is triggered and runs with the IAM role that gives the function permission to stop the EC2 instances.
3. The EC2 instances enter the stopped state
4. Later, at (for example) 05:00 AM GMT, a CloudWatch event is scheduled to run a Lambda function to start the EC2 instances
5. The Lambda function is triggered and runs with the IAM role that gives it permission to start the EC2 instances.
6. The EC2 instances enter the running state.

? Event-based lambda functin example: Create thubnail image
1. user
TODO aws cloud
2. source bucket
3. lambda
4. execution role
5. Access policy -> lambda function -> target bucket

* => Now, consider an example use case for an event-based Lambda function. Suppose that you want to create a thumbnail for each image (.jpg or .png object) that is uploaded to an S3 bucket.
* To build a solution, you can create a Lambda function that Amazon S3 invokes when objects are uploaded. Then, the Lambda function reads the image object from the source bucket and creates a thumbnail image in a target bucket. Here’s how it works:
    1. A user uploads an object to the source bucket in Amazon S3 (object-created event).
    2. Amazon S3 detects the object-created event.
    3. Amazon S3 publishes theobject-created event to Lambda by invoking the Lambda function and passing event data
    4. Lambda runs the Lambda function by assuming the execution role that you specified when you created the Lambda function
    5. Based the event data that the Lambda function receives, it knows the source bucket name and object key name. The Lambda function reads the object and creates a thumbnail by using graphics libraries, and saves the thumbnail to the target bucket.© 2022, Amazon Web Services, Inc. or its affiliates. All rights reserved.73Event-based Lambda function example: Create thumbnail images Source bucket Target bucket.

? AWS Lambda quotas
* Soft limits per Region:
  * concurrent executions = 1000
  * function and layer storage = 75 GB
* hard limits for individual functions:
  * maximum function memory allocation = 10,240 MB
  * function timeout = 15 minutes
  * deployment package size = 250 Mb unzipped, including layers
  * container image code packagae size = 10 GB
* Additional limits also exist. Details are in the AWS Lambda quotas documentation at https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html.

* => AWS Lambda does have some quotas that you should know about when you create and deploy Lambda functions.

* AWS Lambda limits the amount of compute and storage resources that you can use to run and store functions. For example, as of this writing, the maximum memory allocation for a single Lambda function is 10,240 MB. It also has limits of 1,000 concurrent executions in a Region. Lambda functions can be configured to run up to 15 minutes per run. You can set the timeout to any value between 1 second and 15 minutes. If you are troubleshooting a Lambda deployment, keep these limits in mind.

* There are limits on the deployment package size of a function (250 MB). A layeris a ZIP archive that contains libraries, a custom runtime, or other dependencies. With layers, you can use libraries in your function without needing to include them in your deploymentpackage. Using layers can help avoid reaching the size limit for deployment package. Layers are also a good way to share code and data between Lambda functions

* For larger workloads that rely on sizable dependencies, such as machine learning or data intensive workloads, you can deploy your Lambda function to a container image up to 10 GB in size.

* Limits are either soft or hard. Soft limits on an account can potentially be relaxed by submitting a support ticket and providing justification for the request. Hard limits cannot be increased

KEY TAKEWAY
* Serverlesscomputingenables you to build and run applications and services without provisioning or managing servers. 
* AWS Lambda is a serverless compute service that provides built-in fault tolerance and automatic scaling.
* An eventsource is an AWS service or developer-created application that triggers a Lambda function to run. 
* The maximum memory allocation for a single Lambda function is 10,240 MB.
* the maximum run time for a Lambda function is 15 minutes.


*/